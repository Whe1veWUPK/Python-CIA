# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtWebEngineWidgets import *
import functions
import subprocess
from py2neo import *
import sys
tempPath=sys.path[0]
tempPath=tempPath[:-9]


sys.path[0]=tempPath
from BackEnd import astree


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1080, 800)
        MainWindow.setMinimumSize(QtCore.QSize(1080, 800))
        MainWindow.setMaximumSize(QtCore.QSize(1080, 800))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(750, 30, 51, 31))
        font = QtGui.QFont()
        font.setFamily("等线 Light")
        font.setPointSize(6)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")

        self.pushButton_add = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_add.setGeometry(QtCore.QRect(800, 30, 51, 31))
        font = QtGui.QFont()
        font.setFamily("等线 Light")
        font.setPointSize(6)
        self.pushButton_add.setFont(font)
        self.pushButton_add.setObjectName("pushButton_add")

        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(230, 30, 521, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")

        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(230, 70, 811, 681))
        font = QtGui.QFont()
        font.setFamily("等线")
        self.textEdit.setFont(font)
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setLineWrapMode(QTextEdit.NoWrap)

        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 191, 801))
        self.frame.setAutoFillBackground(True)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        self.pushButton_2 = QtWidgets.QPushButton(self.frame)
        self.pushButton_2.setGeometry(QtCore.QRect(30, 80, 131, 41))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_4 = QtWidgets.QPushButton(self.frame)
        self.pushButton_4.setGeometry(QtCore.QRect(30, 170, 131, 41))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.frame)
        self.pushButton_5.setGeometry(QtCore.QRect(30, 215, 131, 41))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_3 = QtWidgets.QPushButton(self.frame)
        self.pushButton_3.setGeometry(QtCore.QRect(30, 125, 131, 41))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(230, 10, 121, 16))
        font = QtGui.QFont()
        font.setFamily("等线")
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.frame.raise_()
        self.pushButton.raise_()
        self.lineEdit.raise_()
        self.textEdit.raise_()
        self.label.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton.clicked.connect(self.openFile)
        self.pushButton_2.clicked.connect(self.openAST)
        self.pushButton_3.clicked.connect(self.openWeb)
        # self.pushButton_4.clicked.connect(self.openAnalyze)
        # self.pushButton_5.clicked.connect(self.openSettings)
        subprocess.Popen('neo4j.bat console', shell=True)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "PythonCIA"))
        self.pushButton.setText(_translate("MainWindow", "browse..."))
        self.pushButton_add.setText(_translate("MainWindow", "add..."))
        self.lineEdit.setPlaceholderText(_translate("MainWindow", "file directory..."))
        self.textEdit.setPlaceholderText(_translate("MainWindow", "#import .py files "))
        self.pushButton_2.setText(_translate("MainWindow", "AST"))
        self.pushButton_3.setText(_translate("MainWindow", "Graph"))
        self.pushButton_4.setText(_translate("MainWindow", "Analyze"))
        self.pushButton_5.setText(_translate("MainWindow", "Settings"))
        self.label.setText(_translate("MainWindow", "File Import"))

    def openFile(self):
        file_dir, file_type = QFileDialog.getOpenFileName(None, 'file', '', '*.py', )  # 打开filedialog

        if file_dir == "":
            print("no file")
        else:
            self.lineEdit.setText(file_dir)
            with open(file_dir, 'r', encoding='utf-8', errors='ignore') as f:
                data = f.read()
            self.textEdit.setText(data)

    def openWeb(self):
        from BackEnd import ast_node_scanner
        ast_node_scanner.graph_constructor('output.txt')
        self.windowMDG = QWidget()
        self.windowMDG.setWindowTitle("MDG")
        self.windowMDG.resize(1800, 900)
        self.windowMDG.setMinimumSize(QtCore.QSize(1080, 800))
        layoutMDG = QVBoxLayout()
        web_viewMDG = QWebEngineView()
        web_viewMDG.load(QUrl("http://localhost:7474"))
        layoutMDG.addWidget(web_viewMDG)
        self.windowMDG.setLayout(layoutMDG)
        self.windowMDG.show()

    def openAST(self):

        self.windowAST = QWidget()
        self.windowAST.setWindowTitle("AST")
        layoutAST = QVBoxLayout()
        self.windowAST.resize(1080, 800)
        self.windowAST.setMinimumSize(QtCore.QSize(1080, 800))
        self.windowAST.setMaximumSize(QtCore.QSize(1080, 800))
        Textedit = QTextEdit()
        layoutAST.addWidget(Textedit)
        Textedit.setGeometry(QtCore.QRect(100, 70, 811, 681))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        Textedit.setFont(font)
        Textedit.setObjectName("textEdit")
        Textedit.setLineWrapMode(QTextEdit.NoWrap)

        self.windowAST.setLayout(layoutAST)
        self.windowAST.show()

        f = open('output.txt', 'a')
        f.seek(0)
        f.truncate()
        sys.stdout = f
        sys.stderr = f

        if self.lineEdit.text() == "":
            return
        else:
            tree = astree.ast_constructor(self.lineEdit.text())
            visit = astree.my_visitor(self.lineEdit.text())
            visit.visit(tree)

            f.seek(0)
            with open("output.txt", 'r', encoding='utf-8', errors='ignore') as f:
                ast_show = f.read()
            Textedit.setText(ast_show)

    def ex_test(self):
        print("ffffffff")
